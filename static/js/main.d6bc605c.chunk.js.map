{"version":3,"sources":["components/Image/Image.jsx","types.js","components/ImageList/ImageList.jsx","components/ScrollingFrame/ScrollingFrame.jsx","components/Carousel/Carousel.jsx","App.jsx","index.js"],"names":["Image","PropTypes","arrayOf","string","isRequired","number","bool","shape","width","transitionDuration","transform","height","imgStyles","image","style","src","alt","ImageList","listStyles","images","className","map","key","Math","random","ScrollingFrame","state","currentListPosition","scrollStep","availableWidth","frameWidth","infinite","maxScrollRange","this","setState","props","step","frameSize","itemWidth","animationDuration","listWidth","length","containerWidth","containerStyles","type","onClick","scrollLeft","scrollRight","React","Component","Carousel","maxElements","increment","decrement","decreaseFrameSize","increaseFrameSize","decreaseImgSize","increaseImgSize","decreaseStepSize","increaseStepSize","decreaseAnimationDuration","increaseAnimationDuration","carouselDefaultData","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6bc605c.chunk.js","sourcesContent":["import React from 'react';\nimport { imegeListShape } from '../../types';\n\nexport const Image = ({ imgStyles, image }) => (\n  <img style={imgStyles} src={image} alt=\"emoji\" />\n);\n\nImage.propTypes = imegeListShape;\n","import PropTypes, { string } from 'prop-types';\n\nexport const carouselShape = {\n  images: PropTypes.arrayOf(string).isRequired,\n  step: PropTypes.number.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  itemWidth: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n};\n\nexport const imegeListShape = {\n  listStyles: PropTypes.shape({\n    width: PropTypes.string.isRequired,\n    transitionDuration: PropTypes.string.isRequired,\n    transform: PropTypes.string.isRequired,\n  }).isRequired,\n  imgStyles: PropTypes.shape({\n    width: PropTypes.string.isRequired,\n    height: PropTypes.string.isRequired,\n  }).isRequired,\n  image: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './ImageList.scss';\nimport { imegeListShape } from '../../types';\nimport { Image } from '../Image/Image';\n\nexport const ImageList = ({ listStyles, imgStyles, images }) => (\n  <ul style={listStyles} className=\"image-list\">\n    {images.map(image => (\n      <li key={Math.random()}>\n        <Image\n          imgStyles={imgStyles}\n          image={image}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nImageList.propTypes = imegeListShape;\n","import React from 'react';\nimport './ScrollingFrame.scss';\nimport { carouselShape } from '../../types';\nimport { ImageList } from '../ImageList/ImageList';\n\nclass ScrollingFrame extends React.Component {\n  state = {\n    currentListPosition: 0,\n  }\n\n  scrollRight(scrollStep, availableWidth, frameWidth, infinite) {\n    const maxScrollRange = -availableWidth + frameWidth;\n\n    this.setState(({ currentListPosition }) => {\n      if (!infinite) {\n        return currentListPosition - scrollStep < maxScrollRange\n          ? { currentListPosition: maxScrollRange }\n          : {\n            currentListPosition: currentListPosition - scrollStep,\n          };\n      }\n\n      if (currentListPosition === maxScrollRange) {\n        return { currentListPosition: 0 };\n      }\n\n      if (currentListPosition - scrollStep < maxScrollRange) {\n        return { currentListPosition: maxScrollRange };\n      }\n\n      return {\n        currentListPosition: currentListPosition - scrollStep,\n      };\n    });\n  }\n\n  scrollLeft(scrollStep, availableWidth, frameWidth, infinite) {\n    const maxScrollRange = -availableWidth + frameWidth;\n    const initialScrollPosition = 0;\n\n    this.setState(({ currentListPosition }) => {\n      if (!infinite) {\n        return currentListPosition + scrollStep >= initialScrollPosition\n          ? { currentListPosition: initialScrollPosition }\n          : {\n            currentListPosition: currentListPosition + scrollStep,\n          };\n      }\n\n      if (currentListPosition === initialScrollPosition) {\n        return { currentListPosition: maxScrollRange };\n      }\n\n      if (currentListPosition + scrollStep >= initialScrollPosition) {\n        return { currentListPosition: initialScrollPosition };\n      }\n\n      return {\n        currentListPosition: currentListPosition + scrollStep,\n      };\n    });\n  }\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { currentListPosition } = this.state;\n    const listWidth = itemWidth * images.length;\n    const listStyles = {\n      width: `${listWidth}px`,\n      transitionDuration: `${animationDuration}ms`,\n      transform: `translateX(${currentListPosition}px)`,\n    };\n    const imgStyles = {\n      width: `${itemWidth}px`,\n      height: `${itemWidth}px`,\n    };\n    const containerWidth = frameSize * itemWidth;\n    const containerStyles = {\n      width: `${containerWidth}px`,\n    };\n    const scrollStep = itemWidth * step;\n\n    return (\n      <div className=\"scroll-frame\">\n        <button\n          type=\"button\"\n          className=\"scroll-frame__button\"\n          onClick={() => {\n            this.scrollLeft(scrollStep, listWidth, containerWidth, infinite);\n          }}\n        >\n          &#10094;\n        </button>\n        <div style={containerStyles} className=\"container\">\n          <ImageList\n            listStyles={listStyles}\n            imgStyles={imgStyles}\n            images={images}\n          />\n        </div>\n        <button\n          type=\"button\"\n          className=\"scroll-frame__button\"\n          onClick={() => {\n            this.scrollRight(scrollStep, listWidth, containerWidth, infinite);\n          }}\n        >\n          &#10095;\n        </button>\n      </div>\n    );\n  }\n}\n\nScrollingFrame.propTypes = carouselShape;\n\nexport default ScrollingFrame;\n","import React from 'react';\nimport './Carousel.scss';\nimport ScrollingFrame from '../ScrollingFrame/ScrollingFrame';\nimport { carouselShape } from '../../types';\n\nclass Carousel extends React.Component {\n  state = {\n    images: this.props.images,\n    step: this.props.step,\n    frameSize: this.props.frameSize,\n    itemWidth: this.props.itemWidth,\n    animationDuration: this.props.animationDuration,\n    infinite: this.props.infinite,\n  };\n\n  increaseFrameSize(maxElements) {\n    this.setState(({ frameSize }) => {\n      if (frameSize === maxElements) {\n        return { frameSize };\n      }\n\n      return { frameSize: frameSize + 1 };\n    });\n  }\n\n  decreaseFrameSize() {\n    this.setState(({ frameSize }) => {\n      if (frameSize === 1) {\n        return { frameSize };\n      }\n\n      return { frameSize: frameSize - 1 };\n    });\n  }\n\n  increaseImgSize(increment) {\n    this.setState(({ itemWidth }) => {\n      if (itemWidth > 300) {\n        return { itemWidth };\n      }\n\n      return { itemWidth: itemWidth + increment };\n    });\n  }\n\n  decreaseImgSize(decrement) {\n    this.setState(({ itemWidth }) => {\n      if (itemWidth < 11) {\n        return { itemWidth };\n      }\n\n      return { itemWidth: itemWidth - decrement };\n    });\n  }\n\n  increaseStepSize(maxElements) {\n    this.setState(({ step }) => {\n      if (step === maxElements) {\n        return { step };\n      }\n\n      return { step: step + 1 };\n    });\n  }\n\n  increaseAnimationDuration() {\n    this.setState(({ animationDuration }) => {\n      if (animationDuration > 9900) {\n        return { animationDuration };\n      }\n\n      return { animationDuration: animationDuration + 100 };\n    });\n  }\n\n  decreaseAnimationDuration() {\n    this.setState(({ animationDuration }) => {\n      if (animationDuration === 100) {\n        return { animationDuration };\n      }\n\n      return { animationDuration: animationDuration - 100 };\n    });\n  }\n\n  decreaseStepSize() {\n    this.setState(({ step }) => {\n      if (step === 1) {\n        return { step };\n      }\n\n      return { step: step - 1 };\n    });\n  }\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <>\n        <ScrollingFrame\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n        <div className=\"tools\">\n          <h2>Increase frame size:</h2>\n          <div className=\"tools__increase-size-container\">\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => {\n                this.decreaseFrameSize();\n              }}\n            >\n              -1\n            </button>\n            <p>{frameSize}</p>\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => {\n                this.increaseFrameSize(images.length);\n              }}\n            >\n              +1\n            </button>\n          </div>\n          <h2>Increase image size:</h2>\n          <div className=\"tools__increase-size-container\">\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => this.decreaseImgSize(10)}\n            >\n              -10px\n            </button>\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => this.decreaseImgSize(1)}\n            >\n              -1px\n            </button>\n            <p>{`${itemWidth}px`}</p>\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => this.increaseImgSize(1)}\n            >\n              +1px\n            </button>\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => this.increaseImgSize(10)}\n            >\n              +10px\n            </button>\n          </div>\n          <h2>Number of images scrolled per click:</h2>\n          <div className=\"tools__increase-size-container\">\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => {\n                this.decreaseStepSize();\n              }}\n            >\n              -1\n            </button>\n            <p>{step}</p>\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => {\n                this.increaseStepSize(images.length);\n              }}\n            >\n              +1\n            </button>\n          </div>\n          <h2>Duration of animation:</h2>\n          <div className=\"tools__increase-size-container\">\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => {\n                this.decreaseAnimationDuration();\n              }}\n            >\n              -100\n            </button>\n            <p>{`${animationDuration}ms`}</p>\n            <button\n              type=\"button\"\n              className=\"tools__button\"\n              onClick={() => {\n                this.increaseAnimationDuration();\n              }}\n            >\n              +100\n            </button>\n          </div>\n          <button\n            type=\"button\"\n            className=\"tools__button\"\n            onClick={() => {\n              this.setState({ infinite: !infinite });\n            }}\n          >\n            Infinite:\n            {' '}\n            {infinite ? 'on' : 'off'}\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nCarousel.propTypes = carouselShape;\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel/Carousel';\n\nconst carouselDefaultData = {\n  images: [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ],\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  infinite: false,\n};\n\nconst App = () => {\n  const {\n    images,\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = carouselDefaultData;\n\n  return (\n    <div className=\"App\">\n      <h1>Carousel with images</h1>\n      <Carousel\n        images={images}\n        step={step}\n        frameSize={frameSize}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}